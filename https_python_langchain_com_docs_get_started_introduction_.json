{
    "total_words": 10455,
    "total_links": 17,
    "filtered_total_words": 567,
    "links": {
        "https://python.langchain.com/docs/get_started/introduction/": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:10.225Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "Skip to main content\nAPI Reference\n🦜️🔗\n💬\nSearch\n⌘\nK\nQuickstart\nInstallation\nQ&A with RAG\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nLangChain is a framework for developing applications powered by large language models (LLMs).\nLangChain simplifies every stage of the LLM application lifecycle:\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\nConcretely, the framework consists of the following open-source libraries:\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\nThe broader ecosystem includes:\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\nSee here for instructions on how to install LangChain, set up your environment, and start building.\nNOTE\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\nUse cases​\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\nQuestion answering with RAG\nExpression Language​\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nEcosystem​\n🦜🛠️ LangSmith​\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n🦜🕸️ LangGraph​\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n🦜🏓 LangServe​\nDeploy LangChain runnables and chains as REST APIs.\nSecurity​\nRead up on our Security best practices to make sure you're developing safely with LangChain.\nAdditional resources​\nComponents​\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\nIntegrations​\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\nGuides​\nBest practices for developing with LangChain.\nAPI reference​\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\nContributing​\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\nHelp us out by providing feedback on this documentation page:\nNext\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nAdditional resources\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "filtered_word_count": 567
        },
        "https://python.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:11.495Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:12.748Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#get-started": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:13.971Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#use-cases": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:15.174Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#expression-language": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:16.384Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#ecosystem": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:17.589Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#%EF%B8%8F-langsmith": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:18.823Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#%EF%B8%8F-langgraph": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:20.034Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#-langserve": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:21.266Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#security": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:22.491Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#additional-resources": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:23.712Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#components": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:24.924Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#integrations": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:26.153Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#guides": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:27.367Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#api-reference": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:28.571Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://python.langchain.com/docs/get_started/introduction/#contributing": {
            "status": "Looks good",
            "indexed_timestamp": "2024-05-01T23:43:29.798Z",
            "content": "Skip to main content\nComponents\nIntegrations\nGuides\nAPI Reference\nMore\n🦜️🔗\n💬\nSearch\n⌘\nK\nGet started\nQuickstart\nInstallation\nUse cases\nQ&A with RAG\nExtracting structured output\nChatbots\nTool use and agents\nQuery analysis\nQ&A over SQL + CSV\nMore\nExpression Language\nGet started\nRunnable interface\nPrimitives\nAdvantages of LCEL\nStreaming\nAdd message history (memory)\nMore\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️LangGraph\n🦜️🏓 LangServe\nSecurity\nGet started\nIntroduction\n\nLangChain is a framework for developing applications powered by large language models (LLMs).\n\nLangChain simplifies every stage of the LLM application lifecycle:\n\nDevelopment: Build your applications using LangChain's open-source building blocks and components. Hit the ground running using third-party integrations and Templates.\nProductionization: Use LangSmith to inspect, monitor and evaluate your chains, so that you can continuously optimize and deploy with confidence.\nDeployment: Turn any chain into an API with LangServe.\n\nConcretely, the framework consists of the following open-source libraries:\n\nlangchain-core: Base abstractions and LangChain Expression Language.\nlangchain-community: Third party integrations.\nPartner packages (e.g. langchain-openai, langchain-anthropic, etc.): Some integrations have been further split into their own lightweight packages that only depend on langchain-core.\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\nlanggraph: Build robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.\nlangserve: Deploy LangChain chains as REST APIs.\n\nThe broader ecosystem includes:\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor LLM applications and seamlessly integrates with LangChain.\nGet started​\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nSee here for instructions on how to install LangChain, set up your environment, and start building.\n\nNOTE\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nUse cases​\n\nIf you're looking to build something specific or are more of a hands-on learner, check out our use-cases. They're walkthroughs and techniques for common end-to-end tasks, such as:\n\nQuestion answering with RAG\nExtracting structured output\nChatbots\nand more!\nExpression Language​\n\nLangChain Expression Language (LCEL) is the foundation of many of LangChain's components, and is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nGet started: LCEL and its benefits\nRunnable interface: The standard interface for LCEL objects\nPrimitives: More on the primitives LCEL includes\nand more!\nEcosystem​\n🦜🛠️ LangSmith​\n\nTrace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n\n🦜🕸️ LangGraph​\n\nBuild stateful, multi-actor applications with LLMs, built on top of (and intended to be used with) LangChain primitives.\n\n🦜🏓 LangServe​\n\nDeploy LangChain runnables and chains as REST APIs.\n\nSecurity​\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nAdditional resources​\nComponents​\n\nLangChain provides standard, extendable interfaces and integrations for many different components, including:\n\nIntegrations​\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides​\n\nBest practices for developing with LangChain.\n\nAPI reference​\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nContributing​\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nHelp us out by providing feedback on this documentation page:\nNext\nIntroduction\nGet started\nUse cases\nExpression Language\nEcosystem\n🦜🛠️ LangSmith\n🦜🕸️ LangGraph\n🦜🏓 LangServe\nSecurity\nAdditional resources\nComponents\nIntegrations\nGuides\nAPI reference\nContributing\nCommunity\nDiscord\nTwitter\nGitHub\nPython\nJS/TS\nMore\nHomepage\nBlog\nYouTube\nCopyright © 2024 LangChain, Inc.",
            "word_count": 615,
            "filtered_content": "",
            "filtered_word_count": 0
        }
    }
}