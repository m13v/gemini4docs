{
    "total_words": 87696,
    "total_links": 22,
    "filtered_total_words": 5250,
    "links": {
        "https://docs.stripe.com/testing": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nUnited States\nEnglish (United States)\nHomePayments\nSimulate payments to test your integration.\nNOT A DEVELOPER?\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\nTest cards let you simulate several scenarios:\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\nTesting interactively\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\nTesting a form interactively with the test card number 4242 4242 4242 4242\nTest code\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\nCaution\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\nBRAND\tNUMBER\tCVC\tDATE\nVisa\t4242424242424242\nVisa (debit)\t4000056655665556\nMastercard\t5555555555554444\nMastercard (2-series)\t2223003122003222\nMastercard (debit)\t5200828282828210\nMastercard (prepaid)\t5105105105105100\nAmerican Express\t378282246310005\nAmerican Express\t371449635398431\nDiscover\t6011111111111117\nDiscover\t6011000990139424\nDiscover (debit)\t6011981111111113\nDiners Club\t3056930009020004\nDiners Club (14-digit card)\t36227206271667\nBCcard and DinaCard\t6555900000604105\nJCB\t3566002020360505\nUnionPay\t6200000000000005\nUnionPay (debit)\t6200000000000047\nUnionPay (19-digit card)\t6205500000000000004\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\nCartes Bancaires/Mastercard\t5555552500001001\neftpos Australia/Visa\t4000050360000001\neftpos Australia/Mastercard\t5555050360000080\nTo simulate successful payments from specific countries, use test cards from the following sections.\nCOUNTRY\tNUMBER\tBRAND\nAMERICAS\nUnited States (US)\t4242424242424242\nArgentina (AR)\t4000000320000021\nBrazil (BR)\t4000000760000002\nCanada (CA)\t4000001240000000\nChile (CL)\t4000001520000001\nColombia (CO)\t4000001700000003\nCosta Rica (CR)\t4000001880000005\nEcuador (EC)\t4000002180000000\nMexico (MX)\t4000004840008001\nPanama (PA)\t4000005910000000\nParaguay (PY)\t4000006000000066\nPeru (PE)\t4000006040000068\nUruguay (UY)\t4000008580000003\nEUROPE and MIDDLE EAST\nSecurity tip\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\nUnited Arab Emirates (AE)\t4000007840000001\nUnited Arab Emirates (AE)\t5200007840000022\nAustria (AT)\t4000000400000008\nBelgium (BE)\t4000000560000004\nBulgaria (BG)\t4000001000000000\nBelarus (BY)\t4000001120000005\nCroatia (HR)\t4000001910000009\nCyprus (CY)\t4000001960000008\nCzech Republic (CZ)\t4000002030000002\nDenmark (DK)\t4000002080000001\nEstonia (EE)\t4000002330000009\nFinland (FI)\t4000002460000001\nFrance (FR)\t4000002500000003\nGermany (DE)\t4000002760000016\nGibraltar (GI)\t4000002920000005\nGreece (GR)\t4000003000000030\nHungary (HU)\t4000003480000005\nIreland (IE)\t4000003720000005\nItaly (IT)\t4000003800000008\nLatvia (LV)\t4000004280000005\nLiechtenstein (LI)\t4000004380000004\nLithuania (LT)\t4000004400000000\nLuxembourg (LU)\t4000004420000006\nMalta (MT)\t4000004700000007\nNetherlands (NL)\t4000005280000002\nNorway (NO)\t4000005780000007\nPoland (PL)\t4000006160000005\nPortugal (PT)\t4000006200000007\nRomania (RO)\t4000006420000001\nSaudi Arabia (SA)\t4000006820000007\nSlovenia (SI)\t4000007050000006\nSlovakia (SK)\t4000007030000001\nSpain (ES)\t4000007240000007\nSweden (SE)\t4000007520000008\nSwitzerland (CH)\t4000007560000009\nUnited Kingdom (GB)\t4000008260000000\nUnited Kingdom (GB)\t4000058260000005\nUnited Kingdom (GB)\t5555558265554449\nASIA PACIFIC\nRegional considerations\nIndia\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\nAustralia (AU)\t4000000360000006\nChina (CN)\t4000001560000002\nHong Kong (HK)\t4000003440000004\nIndia (IN)\t4000003560000008\nJapan (JP)\t4000003920000003\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\nNew Zealand (NZ)\t4000005540000008\nSingapore (SG)\t4000007020000003\nTaiwan (TW)\t4000001580000008\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\nPayment Method\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\nAlways blocked\n\t4100000000000019\nRadar always blocks it.\nHighest risk\n\t4000000000004954\nElevated risk\n\t4000000000009235\nThe charge has a risk level of “elevated”\nIf you use Radar for Fraud Teams, Radar might queue it for review.\nCVC check fails\n\t4000000000000101\nIf you provide a CVC number, the CVC check fails.\nPostal code check fails\n\t4000000000000036\nIf you provide a postal code, the postal code check fails.\nLine1 check fails\n\t4000000000000028\nThe address line 1 check fails.\nAddress checks fail\n\t4000000000000010\nThe address postal code check and address line 1 check both fail.\nAddress unavailable\n\t4000000000000044\nThe address postal code check and address line 1 check are both unavailable.\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\nDashboard not supported\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\nAuthentication and setup\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\nNote\nAll 3DS references indicate 3D Secure 2.\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\nCHALLENGE FLOW\tNUMBER\tDETAILS\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nTo test webhooks, you have two options:\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\nDifferent payment methods have different test procedures:\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\nLearn how to test scenarios with instant verifications using Financial Connections.\nSend transaction emails in test mode\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\nTest account numbers\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\nTest microdeposit amounts and descriptor codes\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\nTo create a test PaymentIntent that either succeeds or fails:\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nRELATED GUIDES\nAPI keys\nStripe Shell\nAPI Explorer\nWelcome to the Stripe Shell!\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n- View supported Stripe commands: \nstripe help ▶️\n- Find webhook events: \nstripe trigger ▶️ [event]\n- Listen for webhook events: \nstripe listen ▶\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n$ ",
            "filtered_word_count": 3417
        },
        "https://docs.stripe.com/testing#main-content": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#cards": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#international-cards": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#declined-payments": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#fraud-prevention": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#invalid-data": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#disputes": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#refunds": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#regulatory-cards": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#terminal": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#non-card-payments": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#rate-limits": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nCreate account\nSign in\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing?testing-method=card-numbers#visa": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing?testing-method=payment-methods#visa": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tPAYMENTMETHOD\n\n\nVisa\tpm_card_visa\nVisa (debit)\tpm_card_visa_debit\nMastercard\tpm_card_mastercard\nMastercard (debit)\tpm_card_mastercard_debit\nMastercard (prepaid)\tpm_card_mastercard_prepaid\nAmerican Express\tpm_card_amex\nDiscover\tpm_card_discover\nDiners Club\tpm_card_diners\nJCB\tpm_card_jcb\nUnionPay\tpm_card_unionpay\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tPAYMENTMETHOD\nCartes Bancaires/Visa\tpm_card_visa_cartesBancaires\nCartes Bancaires/Mastercard\tpm_card_mastercard_cartesBancaires\neftpos Australia/Visa\tpm_card_visa_debit_eftposAuCoBranded\neftpos Australia/Mastercard\tpm_card_mastercard_debit_eftposAuCoBranded\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tPAYMENTMETHOD\tBRAND\n\n\nAMERICAS\nUnited States (US)\tpm_card_us\tVisa\nArgentina (AR)\tpm_card_ar\tVisa\nBrazil (BR)\tpm_card_br\tVisa\nCanada (CA)\tpm_card_ca\tVisa\nChile (CL)\tpm_card_cl\tVisa\nColombia (CO)\tpm_card_co\tVisa\nCosta Rica (CR)\tpm_card_cr\tVisa\nEcuador (EC)\tpm_card_ec\tVisa\nMexico (MX)\tpm_card_mx\tVisa\nPanama (PA)\tpm_card_pa\tVisa\nParaguay (PY)\tpm_card_py\tVisa\nPeru (PE)\tpm_card_pe\tVisa\nUruguay (UY)\tpm_card_uy\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\tpm_card_ae\tVisa\nUnited Arab Emirates (AE)\tpm_card_ae_mastercard\tMastercard\nAustria (AT)\tpm_card_at\tVisa\nBelgium (BE)\tpm_card_be\tVisa\nBulgaria (BG)\tpm_card_bg\tVisa\nBelarus (BY)\tpm_card_by\tVisa\nCroatia (HR)\tpm_card_hr\tVisa\nCyprus (CY)\tpm_card_cy\tVisa\nCzech Republic (CZ)\tpm_card_cz\tVisa\nDenmark (DK)\tpm_card_dk\tVisa\nEstonia (EE)\tpm_card_ee\tVisa\nFinland (FI)\tpm_card_fi\tVisa\nFrance (FR)\tpm_card_fr\tVisa\nGermany (DE)\tpm_card_de\tVisa\nGibraltar (GI)\tpm_card_gi\tVisa\nGreece (GR)\tpm_card_gr\tVisa\nHungary (HU)\tpm_card_hu\tVisa\nIreland (IE)\tpm_card_ie\tVisa\nItaly (IT)\tpm_card_it\tVisa\nLatvia (LV)\tpm_card_lv\tVisa\nLiechtenstein (LI)\tpm_card_li\tVisa\nLithuania (LT)\tpm_card_lt\tVisa\nLuxembourg (LU)\tpm_card_lu\tVisa\nMalta (MT)\tpm_card_mt\tVisa\nNetherlands (NL)\tpm_card_nl\tVisa\nNorway (NO)\tpm_card_no\tVisa\nPoland (PL)\tpm_card_pl\tVisa\nPortugal (PT)\tpm_card_pt\tVisa\nRomania (RO)\tpm_card_ro\tVisa\nSlovenia (SI)\tpm_card_si\tVisa\nSlovakia (SK)\tpm_card_sk\tVisa\nSpain (ES)\tpm_card_es\tVisa\nSweden (SE)\tpm_card_se\tVisa\nSwitzerland (CH)\tpm_card_ch\tVisa\nUnited Kingdom (GB)\tpm_card_gb\tVisa\nUnited Kingdom (GB)\tpm_card_gb_debit\tVisa (debit)\nUnited Kingdom (GB)\tpm_card_gb_mastercard\tMastercard\nASIA PACIFIC 2\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\tpm_card_au\tVisa\nChina (CN)\tpm_card_cn\tVisa\nHong Kong (HK)\tpm_card_hk\tVisa\nIndia (IN)\tpm_card_in\tVisa\nJapan (JP)\tpm_card_jp\tVisa\nJapan (JP)\tpm_card_jcb\tJCB\nMalaysia (my)\tpm_card_my\tVisa\nNew Zealand (NZ)\tpm_card_nz\tVisa\nSingapore (SG)\tpm_card_sg\tVisa\nTaiwan (TW)\tpm_card_tw\tVisa\nThailand (TH)\tpm_card_th_credit\tVisa (credit)\nThailand (TH)\tpm_card_th_debit\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\tpm_card_visa_chargeDeclined\tcard_declined\tgeneric_decline\nInsufficient funds decline\tpm_card_visa_chargeDeclinedInsufficientFunds\tcard_declined\tinsufficient_funds\nLost card decline\tpm_card_visa_chargeDeclinedLostCard\tcard_declined\tlost_card\nStolen card decline\tpm_card_visa_chargeDeclinedStolenCard\tcard_declined\tstolen_card\nExpired card decline\tpm_card_chargeDeclinedExpiredCard\texpired_card\tn/a\nIncorrect CVC decline\tpm_card_chargeDeclinedIncorrectCvc\tincorrect_cvc\tn/a\nProcessing error decline\tpm_card_chargeDeclinedProcessingError\tprocessing_error\tn/a\nExceeding velocity limit decline\tpm_card_visa_chargeDeclinedVelocityLimitExceeded\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\nDecline after attaching\tpm_card_chargeCustomerFail\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\n\n\n\n\nAlways blocked\n\n\t\n\npm_card_radarBlock\n\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t\n\npm_card_riskLevelHighest\n\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t\n\npm_card_riskLevelElevated\n\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t\n\npm_card_cvcCheckFail\n\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t\n\npm_card_avsZipFail\n\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t\n\npm_card_avsLine1Fail\n\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t\n\npm_card_avsFail\n\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t\n\npm_card_avsUnchecked\n\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\nFraudulent\tpm_card_createDispute\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\tpm_card_createDisputeProductNotReceived\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\tpm_card_createDisputeInquiry\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nMultiple disputes\tpm_card_createMultipleDisputes\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\nAsynchronous success\tpm_card_pendingRefund\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\tpm_card_refundFail\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\nBypass pending balance\tpm_card_bypassPending\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\tpm_card_bypassPendingInternational\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tPAYMENTMETHOD\tDETAILS\n\n\nAuthenticate unless set up\tpm_card_authenticationRequiredOnSetup\tThis card requires authentication for every payment unless you set it up for future payments. After you set it up, it no longer requires authentication.\nAlways authenticate\tpm_card_authenticationRequired\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\tpm_card_authenticationRequiredSetupForOffSession\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\tpm_card_authenticationRequiredChargeDeclinedInsufficientFunds\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tPAYMENTMETHOD\tDETAILS\n\n\nRequired\tOK\tpm_card_threeDSecure2Required\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tDeclined\tpm_card_threeDSecureRequiredChargeDeclined\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tError\tpm_card_threeDSecureRequiredProcessingError\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\nSupported\tOK\tpm_card_threeDSecureOptional\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tError\tpm_card_threeDSecureOptionalProcessingError\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tUnenrolled\tpm_card_visa\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\nNot supported\t\tpm_card_amex_threeDSecureNotSupported\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\toffline_pin_cvm\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\toffline_pin_sca_retry\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\tonline_pin_cvm\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\tonline_pin_sca_retry\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3634,
            "filtered_content": "Visa\tpm_card_visa\nVisa (debit)\tpm_card_visa_debit\nMastercard\tpm_card_mastercard\nMastercard (debit)\tpm_card_mastercard_debit\nMastercard (prepaid)\tpm_card_mastercard_prepaid\nAmerican Express\tpm_card_amex\nDiscover\tpm_card_discover\nDiners Club\tpm_card_diners\nJCB\tpm_card_jcb\nUnionPay\tpm_card_unionpay\nCartes Bancaires/Visa\tpm_card_visa_cartesBancaires\nCartes Bancaires/Mastercard\tpm_card_mastercard_cartesBancaires\neftpos Australia/Visa\tpm_card_visa_debit_eftposAuCoBranded\neftpos Australia/Mastercard\tpm_card_mastercard_debit_eftposAuCoBranded\nCOUNTRY\tPAYMENTMETHOD\tBRAND\nUnited States (US)\tpm_card_us\tVisa\nArgentina (AR)\tpm_card_ar\tVisa\nBrazil (BR)\tpm_card_br\tVisa\nCanada (CA)\tpm_card_ca\tVisa\nChile (CL)\tpm_card_cl\tVisa\nColombia (CO)\tpm_card_co\tVisa\nCosta Rica (CR)\tpm_card_cr\tVisa\nEcuador (EC)\tpm_card_ec\tVisa\nMexico (MX)\tpm_card_mx\tVisa\nPanama (PA)\tpm_card_pa\tVisa\nParaguay (PY)\tpm_card_py\tVisa\nPeru (PE)\tpm_card_pe\tVisa\nUruguay (UY)\tpm_card_uy\tVisa\nUnited Arab Emirates (AE)\tpm_card_ae\tVisa\nUnited Arab Emirates (AE)\tpm_card_ae_mastercard\tMastercard\nAustria (AT)\tpm_card_at\tVisa\nBelgium (BE)\tpm_card_be\tVisa\nBulgaria (BG)\tpm_card_bg\tVisa\nBelarus (BY)\tpm_card_by\tVisa\nCroatia (HR)\tpm_card_hr\tVisa\nCyprus (CY)\tpm_card_cy\tVisa\nCzech Republic (CZ)\tpm_card_cz\tVisa\nDenmark (DK)\tpm_card_dk\tVisa\nEstonia (EE)\tpm_card_ee\tVisa\nFinland (FI)\tpm_card_fi\tVisa\nFrance (FR)\tpm_card_fr\tVisa\nGermany (DE)\tpm_card_de\tVisa\nGibraltar (GI)\tpm_card_gi\tVisa\nGreece (GR)\tpm_card_gr\tVisa\nHungary (HU)\tpm_card_hu\tVisa\nIreland (IE)\tpm_card_ie\tVisa\nItaly (IT)\tpm_card_it\tVisa\nLatvia (LV)\tpm_card_lv\tVisa\nLiechtenstein (LI)\tpm_card_li\tVisa\nLithuania (LT)\tpm_card_lt\tVisa\nLuxembourg (LU)\tpm_card_lu\tVisa\nMalta (MT)\tpm_card_mt\tVisa\nNetherlands (NL)\tpm_card_nl\tVisa\nNorway (NO)\tpm_card_no\tVisa\nPoland (PL)\tpm_card_pl\tVisa\nPortugal (PT)\tpm_card_pt\tVisa\nRomania (RO)\tpm_card_ro\tVisa\nSlovenia (SI)\tpm_card_si\tVisa\nSlovakia (SK)\tpm_card_sk\tVisa\nSpain (ES)\tpm_card_es\tVisa\nSweden (SE)\tpm_card_se\tVisa\nSwitzerland (CH)\tpm_card_ch\tVisa\nUnited Kingdom (GB)\tpm_card_gb\tVisa\nUnited Kingdom (GB)\tpm_card_gb_debit\tVisa (debit)\nUnited Kingdom (GB)\tpm_card_gb_mastercard\tMastercard\nASIA PACIFIC 2\nAustralia (AU)\tpm_card_au\tVisa\nChina (CN)\tpm_card_cn\tVisa\nHong Kong (HK)\tpm_card_hk\tVisa\nIndia (IN)\tpm_card_in\tVisa\nJapan (JP)\tpm_card_jp\tVisa\nJapan (JP)\tpm_card_jcb\tJCB\nMalaysia (my)\tpm_card_my\tVisa\nNew Zealand (NZ)\tpm_card_nz\tVisa\nSingapore (SG)\tpm_card_sg\tVisa\nTaiwan (TW)\tpm_card_tw\tVisa\nThailand (TH)\tpm_card_th_credit\tVisa (credit)\nThailand (TH)\tpm_card_th_debit\tVisa (debit)\nGeneric decline\tpm_card_visa_chargeDeclined\tcard_declined\tgeneric_decline\nInsufficient funds decline\tpm_card_visa_chargeDeclinedInsufficientFunds\tcard_declined\tinsufficient_funds\nLost card decline\tpm_card_visa_chargeDeclinedLostCard\tcard_declined\tlost_card\nStolen card decline\tpm_card_visa_chargeDeclinedStolenCard\tcard_declined\tstolen_card\nExpired card decline\tpm_card_chargeDeclinedExpiredCard\texpired_card\tn/a\nIncorrect CVC decline\tpm_card_chargeDeclinedIncorrectCvc\tincorrect_cvc\tn/a\nProcessing error decline\tpm_card_chargeDeclinedProcessingError\tprocessing_error\tn/a\nExceeding velocity limit decline\tpm_card_visa_chargeDeclinedVelocityLimitExceeded\tcard_declined\tcard_velocity_exceeded\nDecline after attaching\tpm_card_chargeCustomerFail\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\npm_card_radarBlock\npm_card_riskLevelHighest\npm_card_riskLevelElevated\npm_card_cvcCheckFail\npm_card_avsZipFail\npm_card_avsLine1Fail\npm_card_avsFail\npm_card_avsUnchecked\nFraudulent\tpm_card_createDispute\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\tpm_card_createDisputeProductNotReceived\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\tpm_card_createDisputeInquiry\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nMultiple disputes\tpm_card_createMultipleDisputes\tWith default account settings, charge succeeds, only to be disputed multiple times.\nAsynchronous success\tpm_card_pendingRefund\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\tpm_card_refundFail\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nBypass pending balance\tpm_card_bypassPending\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\tpm_card_bypassPendingInternational\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nAuthenticate unless set up\tpm_card_authenticationRequiredOnSetup\tThis card requires authentication for every payment unless you set it up for future payments. After you set it up, it no longer requires authentication.\nAlways authenticate\tpm_card_authenticationRequired\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\tpm_card_authenticationRequiredSetupForOffSession\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\tpm_card_authenticationRequiredChargeDeclinedInsufficientFunds\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\n3D SECURE USAGE\tOUTCOME\tPAYMENTMETHOD\tDETAILS\nRequired\tOK\tpm_card_threeDSecure2Required\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tDeclined\tpm_card_threeDSecureRequiredChargeDeclined\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tError\tpm_card_threeDSecureRequiredProcessingError\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\nSupported\tOK\tpm_card_threeDSecureOptional\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tError\tpm_card_threeDSecureOptionalProcessingError\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tUnenrolled\tpm_card_visa\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\nNot supported\t\tpm_card_amex_threeDSecureNotSupported\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\nOffline PIN\toffline_pin_cvm\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\toffline_pin_sca_retry\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\tonline_pin_cvm\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\tonline_pin_sca_retry\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.",
            "filtered_word_count": 1042
        },
        "https://docs.stripe.com/testing?testing-method=tokens#visa": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tTOKEN\n\n\nVisa\ttok_visa\nVisa (debit)\ttok_visa_debit\nMastercard\ttok_mastercard\nMastercard (debit)\ttok_mastercard_debit\nMastercard (prepaid)\ttok_mastercard_prepaid\nAmerican Express\ttok_amex\nDiscover\ttok_discover\nDiners Club\ttok_diners\nJCB\ttok_jcb\nUnionPay\ttok_unionpay\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tTOKEN\nCartes Bancaires/Visa\ttok_visa_cartesBancaires\nCartes Bancaires/Mastercard\ttok_mastercard_cartesBancaires\neftpos Australia/Visa\ttok_visa_debit_eftposAuCoBranded\neftpos Australia/Mastercard\ttok_mastercard_debit_eftposAuCoBranded\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tTOKEN\tBRAND\n\n\nAMERICAS\nUnited States (US)\ttok_us\tVisa\nArgentina (AR)\ttok_ar\tVisa\nBrazil (BR)\ttok_br\tVisa\nCanada (CA)\ttok_ca\tVisa\nChile (CL)\ttok_cl\tVisa\nColombia (CO)\ttok_co\tVisa\nCosta Rica (CR)\ttok_cr\tVisa\nEcuador (EC)\ttok_ec\tVisa\nMexico (MX)\ttok_mx\tVisa\nPanama (PA)\ttok_pa\tVisa\nParaguay (PY)\ttok_py\tVisa\nPeru (PE)\ttok_pe\tVisa\nUruguay (UY)\ttok_uy\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\ttok_ae\tVisa\nUnited Arab Emirates (AE)\ttok_ae_mastercard\tMastercard\nAustria (AT)\ttok_at\tVisa\nBelgium (BE)\ttok_be\tVisa\nBulgaria (BG)\ttok_bg\tVisa\nBelarus (BY)\ttok_by\tVisa\nCroatia (HR)\ttok_hr\tVisa\nCyprus (CY)\ttok_cy\tVisa\nCzech Republic (CZ)\ttok_cz\tVisa\nDenmark (DK)\ttok_dk\tVisa\nEstonia (EE)\ttok_ee\tVisa\nFinland (FI)\ttok_fi\tVisa\nFrance (FR)\ttok_fr\tVisa\nGermany (DE)\ttok_de\tVisa\nGibraltar (GI)\ttok_gi\tVisa\nGreece (GR)\ttok_gr\tVisa\nHungary (HU)\ttok_hu\tVisa\nIreland (IE)\ttok_ie\tVisa\nItaly (IT)\ttok_it\tVisa\nLatvia (LV)\ttok_lv\tVisa\nLiechtenstein (LI)\ttok_li\tVisa\nLithuania (LT)\ttok_lt\tVisa\nLuxembourg (LU)\ttok_lu\tVisa\nMalta (MT)\ttok_mt\tVisa\nNetherlands (NL)\ttok_nl\tVisa\nNorway (NO)\ttok_no\tVisa\nPoland (PL)\ttok_pl\tVisa\nPortugal (PT)\ttok_pt\tVisa\nRomania (RO)\ttok_ro\tVisa\nSlovenia (SI)\ttok_si\tVisa\nSlovakia (SK)\ttok_sk\tVisa\nSpain (ES)\ttok_es\tVisa\nSweden (SE)\ttok_se\tVisa\nSwitzerland (CH)\ttok_ch\tVisa\nUnited Kingdom (GB)\ttok_gb\tVisa\nUnited Kingdom (GB)\ttok_gb_debit\tVisa (debit)\nUnited Kingdom (GB)\ttok_gb_mastercard\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\ttok_au\tVisa\nChina (CN)\ttok_cn\tVisa\nHong Kong (HK)\ttok_hk\tVisa\nIndia (IN)\ttok_in\tVisa\nJapan (JP)\ttok_jp\tVisa\nJapan (JP)\ttok_jcb\tJCB\nMalaysia (my)\ttok_my\tVisa\nNew Zealand (NZ)\ttok_nz\tVisa\nSingapore (SG)\ttok_sg\tVisa\nTaiwan (TW)\ttok_tw\tVisa\nThailand (TH)\ttok_th_credit\tVisa (credit)\nThailand (TH)\ttok_th_debit\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\ttok_visa_chargeDeclined\tcard_declined\tgeneric_decline\nInsufficient funds decline\ttok_visa_chargeDeclinedInsufficientFunds\tcard_declined\tinsufficient_funds\nLost card decline\ttok_visa_chargeDeclinedLostCard\tcard_declined\tlost_card\nStolen card decline\ttok_visa_chargeDeclinedStolenCard\tcard_declined\tstolen_card\nExpired card decline\ttok_chargeDeclinedExpiredCard\texpired_card\tn/a\nIncorrect CVC decline\ttok_chargeDeclinedIncorrectCvc\tincorrect_cvc\tn/a\nProcessing error decline\ttok_chargeDeclinedProcessingError\tprocessing_error\tn/a\nExceeding velocity limit decline\ttok_visa_chargeDeclinedVelocityLimitExceeded\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tTOKEN\tDETAILS\n\n\nDecline after attaching\ttok_chargeCustomerFail\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tTOKEN\tDETAILS\n\n\n\n\nAlways blocked\n\n\t\n\ntok_radarBlock\n\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t\n\ntok_riskLevelHighest\n\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t\n\ntok_riskLevelElevated\n\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t\n\ntok_cvcCheckFail\n\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t\n\ntok_avsZipFail\n\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t\n\ntok_avsLine1Fail\n\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t\n\ntok_avsFail\n\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t\n\ntok_avsUnchecked\n\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tTOKEN\tDETAILS\nFraudulent\ttok_createDispute\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\ttok_createDisputeProductNotReceived\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\ttok_createDisputeInquiry\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nMultiple disputes\ttok_createMultipleDisputes\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tTOKEN\tDETAILS\nAsynchronous success\ttok_pendingRefund\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\ttok_refundFail\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tTOKEN\tDETAILS\nBypass pending balance\ttok_bypassPending\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\ttok_bypassPending\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tTOKEN\tDETAILS\n\n\nRequired\tOK\ttok_threeDSecure2Required\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tDeclined\ttok_threeDSecureRequiredChargeDeclined\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tError\ttok_threeDSecureRequiredProcessingError\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\nSupported\tOK\ttok_threeDSecureOptional\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tError\ttok_threeDSecureOptionalProcessingError\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tUnenrolled\ttok_visa\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\nNot supported\t\ttok_amex_threeDSecureNotSupported\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3632,
            "filtered_content": "Visa\ttok_visa\nVisa (debit)\ttok_visa_debit\nMastercard\ttok_mastercard\nMastercard (debit)\ttok_mastercard_debit\nMastercard (prepaid)\ttok_mastercard_prepaid\nAmerican Express\ttok_amex\nDiscover\ttok_discover\nDiners Club\ttok_diners\nJCB\ttok_jcb\nUnionPay\ttok_unionpay\nCartes Bancaires/Visa\ttok_visa_cartesBancaires\nCartes Bancaires/Mastercard\ttok_mastercard_cartesBancaires\neftpos Australia/Visa\ttok_visa_debit_eftposAuCoBranded\neftpos Australia/Mastercard\ttok_mastercard_debit_eftposAuCoBranded\nCOUNTRY\tTOKEN\tBRAND\nUnited States (US)\ttok_us\tVisa\nArgentina (AR)\ttok_ar\tVisa\nBrazil (BR)\ttok_br\tVisa\nCanada (CA)\ttok_ca\tVisa\nChile (CL)\ttok_cl\tVisa\nColombia (CO)\ttok_co\tVisa\nCosta Rica (CR)\ttok_cr\tVisa\nEcuador (EC)\ttok_ec\tVisa\nMexico (MX)\ttok_mx\tVisa\nPanama (PA)\ttok_pa\tVisa\nParaguay (PY)\ttok_py\tVisa\nPeru (PE)\ttok_pe\tVisa\nUruguay (UY)\ttok_uy\tVisa\nUnited Arab Emirates (AE)\ttok_ae\tVisa\nUnited Arab Emirates (AE)\ttok_ae_mastercard\tMastercard\nAustria (AT)\ttok_at\tVisa\nBelgium (BE)\ttok_be\tVisa\nBulgaria (BG)\ttok_bg\tVisa\nBelarus (BY)\ttok_by\tVisa\nCroatia (HR)\ttok_hr\tVisa\nCyprus (CY)\ttok_cy\tVisa\nCzech Republic (CZ)\ttok_cz\tVisa\nDenmark (DK)\ttok_dk\tVisa\nEstonia (EE)\ttok_ee\tVisa\nFinland (FI)\ttok_fi\tVisa\nFrance (FR)\ttok_fr\tVisa\nGermany (DE)\ttok_de\tVisa\nGibraltar (GI)\ttok_gi\tVisa\nGreece (GR)\ttok_gr\tVisa\nHungary (HU)\ttok_hu\tVisa\nIreland (IE)\ttok_ie\tVisa\nItaly (IT)\ttok_it\tVisa\nLatvia (LV)\ttok_lv\tVisa\nLiechtenstein (LI)\ttok_li\tVisa\nLithuania (LT)\ttok_lt\tVisa\nLuxembourg (LU)\ttok_lu\tVisa\nMalta (MT)\ttok_mt\tVisa\nNetherlands (NL)\ttok_nl\tVisa\nNorway (NO)\ttok_no\tVisa\nPoland (PL)\ttok_pl\tVisa\nPortugal (PT)\ttok_pt\tVisa\nRomania (RO)\ttok_ro\tVisa\nSlovenia (SI)\ttok_si\tVisa\nSlovakia (SK)\ttok_sk\tVisa\nSpain (ES)\ttok_es\tVisa\nSweden (SE)\ttok_se\tVisa\nSwitzerland (CH)\ttok_ch\tVisa\nUnited Kingdom (GB)\ttok_gb\tVisa\nUnited Kingdom (GB)\ttok_gb_debit\tVisa (debit)\nUnited Kingdom (GB)\ttok_gb_mastercard\tMastercard\nAustralia (AU)\ttok_au\tVisa\nChina (CN)\ttok_cn\tVisa\nHong Kong (HK)\ttok_hk\tVisa\nIndia (IN)\ttok_in\tVisa\nJapan (JP)\ttok_jp\tVisa\nJapan (JP)\ttok_jcb\tJCB\nMalaysia (my)\ttok_my\tVisa\nNew Zealand (NZ)\ttok_nz\tVisa\nSingapore (SG)\ttok_sg\tVisa\nTaiwan (TW)\ttok_tw\tVisa\nThailand (TH)\ttok_th_credit\tVisa (credit)\nThailand (TH)\ttok_th_debit\tVisa (debit)\nGeneric decline\ttok_visa_chargeDeclined\tcard_declined\tgeneric_decline\nInsufficient funds decline\ttok_visa_chargeDeclinedInsufficientFunds\tcard_declined\tinsufficient_funds\nLost card decline\ttok_visa_chargeDeclinedLostCard\tcard_declined\tlost_card\nStolen card decline\ttok_visa_chargeDeclinedStolenCard\tcard_declined\tstolen_card\nExpired card decline\ttok_chargeDeclinedExpiredCard\texpired_card\tn/a\nIncorrect CVC decline\ttok_chargeDeclinedIncorrectCvc\tincorrect_cvc\tn/a\nProcessing error decline\ttok_chargeDeclinedProcessingError\tprocessing_error\tn/a\nExceeding velocity limit decline\ttok_visa_chargeDeclinedVelocityLimitExceeded\tcard_declined\tcard_velocity_exceeded\nDecline after attaching\ttok_chargeCustomerFail\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\ntok_radarBlock\ntok_riskLevelHighest\ntok_riskLevelElevated\ntok_cvcCheckFail\ntok_avsZipFail\ntok_avsLine1Fail\ntok_avsFail\ntok_avsUnchecked\nFraudulent\ttok_createDispute\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\ttok_createDisputeProductNotReceived\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\ttok_createDisputeInquiry\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nMultiple disputes\ttok_createMultipleDisputes\tWith default account settings, charge succeeds, only to be disputed multiple times.\nAsynchronous success\ttok_pendingRefund\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\ttok_refundFail\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nBypass pending balance\ttok_bypassPending\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\ttok_bypassPending\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D SECURE USAGE\tOUTCOME\tTOKEN\tDETAILS\nRequired\tOK\ttok_threeDSecure2Required\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tDeclined\ttok_threeDSecureRequiredChargeDeclined\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\nRequired\tError\ttok_threeDSecureRequiredProcessingError\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\nSupported\tOK\ttok_threeDSecureOptional\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tError\ttok_threeDSecureOptionalProcessingError\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\nSupported\tUnenrolled\ttok_visa\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\nNot supported\t\ttok_amex_threeDSecureNotSupported\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent proceeds without performing authentication.",
            "filtered_word_count": 791
        },
        "https://docs.stripe.com/testing#evidence": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#web-collect-details": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#use-test-cards": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#available-balance": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#webhooks": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#redirects": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        },
        "https://docs.stripe.com/testing#see-also": {
            "status": "Looks good",
            "content": "Skip to content\nSearch the docs or ask a question\n/\nSign in\nCreate account\nGet started\nPayments\nFinance automation\nBanking as a service\nDeveloper tools\nNo-code\nAPIs & SDKs\nHelp\nOverview\nAccept a payment\nAbout Stripe payments\nUpgrade your integration\nSTART AN INTEGRATION\nPayment Links\nCheckout\nWeb Elements\nMobile Elements\nPAYMENT SCENARIOS\nDuring the payment\nAfter the payment\nAdd payment methods\nMore payment scenarios\nFaster checkout with Link\nOTHER STRIPE PRODUCTS\nConnect\nTerminal\nFinancial Connections\nCrypto\nClimate\nCustom Checkout\nRESOURCES\nAbout the APIs\nRegulation support\nTesting\nUnited States\nEnglish (United States)\nHomePayments\nTesting\nSimulate payments to test your integration.\nNOT A DEVELOPER?\n\nCheck out our no-code docs, use a prebuilt solution from our partner directory, or hire a Stripe-certified expert.\n\nTo confirm that your integration works correctly, simulate transactions without moving any money using special values in test mode.\n\nTest cards let you simulate several scenarios:\n\nSuccessful payments by card brand or country\nCard errors due to declines, fraud, or invalid data\nDisputes and refunds\nAuthentication with 3D Secure and PINs\n\nTesting non-card payments works similarly. Each payment method has its own special values. Because of rate limits, we don’t recommend using test mode to load-test your integration. Instead, see our documentation on load testing.\n\nHow to use test cards\n\nAny time you work with a test card, use test API keys in all API calls. This is true whether you’re serving a payment form to test interactively or writing test code.\n\nCommon mistake\n\nDon’t use real card details. The Stripe Services Agreement prohibits testing in live mode using real payment method details. Use your test API keys and the card numbers below.\n\nTesting interactively\n\nWhen testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.\n\nUse a valid future date, such as 12/34.\nUse any three-digit CVC (four digits for American Express cards).\nUse any value you like for other form fields.\n\nTesting a form interactively with the test card number 4242 4242 4242 4242\n\nTest code\n\nWhen writing test code, use a PaymentMethod such as pm_card_visa instead of a card number. We don’t recommend using card numbers directly in API calls or server-side code, even in test mode. If you do use them, your code might not be PCI-compliant when you go live. By default, a PaymentMethod isn’t attached to a Customer.\n\nCommand Line\nSelect a language\nCurl\ncurl https://api.stripe.com/v1/payment_intents \\\n  -u \"sk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\\n  -d amount=500 \\\n  -d currency=gbp \\\n  -d payment_method=pm_card_visa\n\nMost integrations don’t use Tokens anymore, but we make test Tokens such as tok_visa available if you need them.\n\nWhen you’re ready to take your integration live, replace your test publishable and secret API keys with live ones. You can’t process live payments if your integration is still using your test API keys.\n\nCards by brand\n\nTo simulate a successful payment, use test cards from the following list. The billing country for each test card is set to the United States. If you need to create test card payments using cards for other billing countries, use international test cards.\n\nCaution\n\nCross border fees are assessed based on the country of the card issuer. While each of the cards in this section use US as the billing country, cards where the issuer country isn’t the US (such as JCB and UnionPay) might be subject to a cross border fee, even in test mode.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND\tNUMBER\tCVC\tDATE\n\n\nVisa\t4242424242424242\n\tAny 3 digits\tAny future date\nVisa (debit)\t4000056655665556\n\tAny 3 digits\tAny future date\nMastercard\t5555555555554444\n\tAny 3 digits\tAny future date\nMastercard (2-series)\t2223003122003222\n\tAny 3 digits\tAny future date\nMastercard (debit)\t5200828282828210\n\tAny 3 digits\tAny future date\nMastercard (prepaid)\t5105105105105100\n\tAny 3 digits\tAny future date\nAmerican Express\t378282246310005\n\tAny 4 digits\tAny future date\nAmerican Express\t371449635398431\n\tAny 4 digits\tAny future date\nDiscover\t6011111111111117\n\tAny 3 digits\tAny future date\nDiscover\t6011000990139424\n\tAny 3 digits\tAny future date\nDiscover (debit)\t6011981111111113\n\tAny 3 digits\tAny future date\nDiners Club\t3056930009020004\n\tAny 3 digits\tAny future date\nDiners Club (14-digit card)\t36227206271667\n\tAny 3 digits\tAny future date\nBCcard and DinaCard\t6555900000604105\n\tAny 3 digits\tAny future date\nJCB\t3566002020360505\n\tAny 3 digits\tAny future date\nUnionPay\t6200000000000005\n\tAny 3 digits\tAny future date\nUnionPay (debit)\t6200000000000047\n\tAny 3 digits\tAny future date\nUnionPay (19-digit card)\t6205500000000000004\n\tAny 3 digits\tAny future date\n\nMost Cartes Bancaires and eftpos cards are co-branded with either Visa or Mastercard. The test cards in the following table simulate successful payments with co-branded cards.\n\nCard numbers\nPaymentMethods\nTokens\nBRAND/CO-BRAND\tNUMBER\tCVC\tDATE\nCartes Bancaires/Visa\t4000002500001001\n\tAny 3 digits\tAny future date\nCartes Bancaires/Mastercard\t5555552500001001\n\tAny 3 digits\tAny future date\neftpos Australia/Visa\t4000050360000001\n\tAny 3 digits\tAny future date\neftpos Australia/Mastercard\t5555050360000080\n\tAny 3 digits\tAny future date\nCards by country\n\nTo simulate successful payments from specific countries, use test cards from the following sections.\n\nCard numbers\nPaymentMethods\nTokens\nCOUNTRY\tNUMBER\tBRAND\n\n\nAMERICAS\nUnited States (US)\t4242424242424242\n\tVisa\nArgentina (AR)\t4000000320000021\n\tVisa\nBrazil (BR)\t4000000760000002\n\tVisa\nCanada (CA)\t4000001240000000\n\tVisa\nChile (CL)\t4000001520000001\n\tVisa\nColombia (CO)\t4000001700000003\n\tVisa\nCosta Rica (CR)\t4000001880000005\n\tVisa\nEcuador (EC)\t4000002180000000\n\tVisa\nMexico (MX)\t4000004840008001\n\tVisa\nPanama (PA)\t4000005910000000\n\tVisa\nParaguay (PY)\t4000006000000066\n\tVisa\nPeru (PE)\t4000006040000068\n\tVisa\nUruguay (UY)\t4000008580000003\n\tVisa\nEUROPE and MIDDLE EAST\nSecurity tip\n\nStrong Customer Authentication regulations require 3D Secure authentication for online payments within the European Economic Area. The test cards in this section simulate a payment that succeeds without authentication. We recommend also testing scenarios that involve authentication, using 3D Secure test cards.\n\n\nUnited Arab Emirates (AE)\t4000007840000001\n\tVisa\nUnited Arab Emirates (AE)\t5200007840000022\n\tMastercard\nAustria (AT)\t4000000400000008\n\tVisa\nBelgium (BE)\t4000000560000004\n\tVisa\nBulgaria (BG)\t4000001000000000\n\tVisa\nBelarus (BY)\t4000001120000005\n\tVisa\nCroatia (HR)\t4000001910000009\n\tVisa\nCyprus (CY)\t4000001960000008\n\tVisa\nCzech Republic (CZ)\t4000002030000002\n\tVisa\nDenmark (DK)\t4000002080000001\n\tVisa\nEstonia (EE)\t4000002330000009\n\tVisa\nFinland (FI)\t4000002460000001\n\tVisa\nFrance (FR)\t4000002500000003\n\tVisa\nGermany (DE)\t4000002760000016\n\tVisa\nGibraltar (GI)\t4000002920000005\n\tVisa\nGreece (GR)\t4000003000000030\n\tVisa\nHungary (HU)\t4000003480000005\n\tVisa\nIreland (IE)\t4000003720000005\n\tVisa\nItaly (IT)\t4000003800000008\n\tVisa\nLatvia (LV)\t4000004280000005\n\tVisa\nLiechtenstein (LI)\t4000004380000004\n\tVisa\nLithuania (LT)\t4000004400000000\n\tVisa\nLuxembourg (LU)\t4000004420000006\n\tVisa\nMalta (MT)\t4000004700000007\n\tVisa\nNetherlands (NL)\t4000005280000002\n\tVisa\nNorway (NO)\t4000005780000007\n\tVisa\nPoland (PL)\t4000006160000005\n\tVisa\nPortugal (PT)\t4000006200000007\n\tVisa\nRomania (RO)\t4000006420000001\n\tVisa\nSaudi Arabia (SA)\t4000006820000007\n\tVisa\nSlovenia (SI)\t4000007050000006\n\tVisa\nSlovakia (SK)\t4000007030000001\n\tVisa\nSpain (ES)\t4000007240000007\n\tVisa\nSweden (SE)\t4000007520000008\n\tVisa\nSwitzerland (CH)\t4000007560000009\n\tVisa\nUnited Kingdom (GB)\t4000008260000000\n\tVisa\nUnited Kingdom (GB)\t4000058260000005\n\tVisa (debit)\nUnited Kingdom (GB)\t5555558265554449\n\tMastercard\nASIA PACIFIC\nRegional considerations\nIndia\n\nTo test subscriptions that require mandates and pre-debit notifications, see India recurring payments.\n\n\nAustralia (AU)\t4000000360000006\n\tVisa\nChina (CN)\t4000001560000002\n\tVisa\nHong Kong (HK)\t4000003440000004\n\tVisa\nIndia (IN)\t4000003560000008\n\tVisa\nJapan (JP)\t4000003920000003\n\tVisa\nJapan (JP)\t3530111333300000\n\tJCB\nMalaysia (my)\t4000004580000002\n\tVisa\nNew Zealand (NZ)\t4000005540000008\n\tVisa\nSingapore (SG)\t4000007020000003\n\tVisa\nTaiwan (TW)\t4000001580000008\n\tVisa\nThailand (TH)\t4000007640000003\n\tVisa (credit)\nThailand (TH)\t4000057640000008\n\tVisa (debit)\nDeclined payments\n\nTo test your integration’s error-handling logic by simulating payments that the issuer declines for various reasons, use test cards from this section. Using one of these cards results in a card error with the given error code and decline code.\n\nCommon mistake\n\nTo simulate an incorrect CVC, you must provide one using any three-digit number. If you don’t provide a CVC, Stripe doesn’t perform the CVC check, so the check can’t fail.\n\nCard numbers\nPayment Method\nTokens\nDESCRIPTION\tNUMBER\tERROR CODE\tDECLINE CODE\n\n\nGeneric decline\t4000000000000002\n\tcard_declined\tgeneric_decline\nInsufficient funds decline\t4000000000009995\n\tcard_declined\tinsufficient_funds\nLost card decline\t4000000000009987\n\tcard_declined\tlost_card\nStolen card decline\t4000000000009979\n\tcard_declined\tstolen_card\nExpired card decline\t4000000000000069\n\texpired_card\tn/a\nIncorrect CVC decline\t4000000000000127\n\tincorrect_cvc\tn/a\nProcessing error decline\t4000000000000119\n\tprocessing_error\tn/a\nIncorrect number decline\t4242424242424241\n\tincorrect_number\tn/a\nExceeding velocity limit decline\t4000000000006975\n\tcard_declined\tcard_velocity_exceeded\n\nThe cards in the previous table can’t be attached to a Customer object. To simulate a declined payment with a successfully attached card, use the next one.\n\nDESCRIPTION\tNUMBER\tDETAILS\nDecline after attaching\t4000000000000341\n\tAttaching this card to a Customer object succeeds, but attempts to charge the customer fail.\nFraud prevention\n\nStripe’s fraud prevention system, Radar, can block payments when they have a high risk level or fail verification checks. You can use the cards in this section to test your Radar settings. You can also use them to test how your integration responds to blocked payments.\n\nEach card simulates specific risk factors. Your Radar settings determine which risk factors cause it to block a payment. Blocked payments result in card errors with an error code of fraud.\n\nCommon mistake\n\nTo simulate a failed CVC check, you must provide a CVC using any three-digit number. To simulate a failed postal code check, you must provide any valid postal code. If you don’t provide those values, Radar doesn’t perform the corresponding checks, so the checks can’t fail.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\n\n\n\n\nAlways blocked\n\n\t4100000000000019\n\t\n\nThe charge has a risk level of “highest”\n\nRadar always blocks it.\n\n\n\n\nHighest risk\n\n\t4000000000004954\n\t\n\nThe charge has a risk level of “highest”\n\nRadar might block it depending on your settings.\n\n\n\n\nElevated risk\n\n\t4000000000009235\n\t\n\nThe charge has a risk level of “elevated”\n\nIf you use Radar for Fraud Teams, Radar might queue it for review.\n\n\n\n\nCVC check fails\n\n\t4000000000000101\n\t\n\nIf you provide a CVC number, the CVC check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nPostal code check fails\n\n\t4000000000000036\n\t\n\nIf you provide a postal code, the postal code check fails.\n\nRadar might block it depending on your settings.\n\n\n\n\nLine1 check fails\n\n\t4000000000000028\n\t\n\nThe address line 1 check fails.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\n\n\n\nAddress checks fail\n\n\t4000000000000010\n\t\n\nThe address postal code check and address line 1 check both fail.\n\nRadar might block it depending on your settings.\n\n\n\n\nAddress unavailable\n\n\t4000000000000044\n\t\n\nThe address postal code check and address line 1 check are both unavailable.\n\nThe payment succeeds unless you block it with a custom Radar rule.\n\nInvalid data\n\nTo test errors resulting from invalid data, provide invalid details. You don’t need a special test card for this. Any invalid value works. For instance:\n\ninvalid_expiry_month: Use an invalid month, such as 13.\ninvalid_expiry_year: Use a year up to 50 years in the past, such as 95.\ninvalid_cvc: Use a two-digit number, such as 99.\nincorrect_number: Use a card number that fails the Luhn check, such as 4242424242424241\n.\nDisputes\n\nTo simulate a disputed transaction, use the test cards in this section. Then, to simulate winning or losing the dispute, provide winning or losing evidence.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nFraudulent\t4000000000000259\n\tWith default account settings, charge succeeds, only to be disputed as fraudulent. This type of dispute is protected after 3D Secure authentication.\nNot received\t4000000000002685\n\tWith default account settings, charge succeeds, only to be disputed as product not received. This type of dispute isn’t protected after 3D Secure authentication.\nInquiry\t4000000000001976\n\tWith default account settings, charge succeeds, only to be disputed as an inquiry.\nWarning\t4000000000005423\n\tWith default account settings, charge succeeds, only to receive an early fraud warning.\nMultiple disputes\t4000000404000079\n\tWith default account settings, charge succeeds, only to be disputed multiple times.\nEvidence\n\nTo simulate winning or losing the dispute, respond with one of the evidence values from the table below.\n\nIf you respond using the API, pass the value from the table as uncategorized_text.\nIf you respond in the Dashboard, enter the value from the table in the Additional information field. Then, click Submit evidence.\nEVIDENCE\tDESCRIPTION\nwinning_evidence\tThe dispute is closed and marked as won. Your account is credited the amount of the charge and related fees.\nlosing_evidence\tThe dispute is closed and marked as lost. Your account isn’t credited.\nRefunds\n\nIn live mode, refunds are asynchronous: a refund can appear to succeed and later fail, or can appear as pending at first and later succeed. To simulate refunds with those behaviors, use the test cards in this section. (With all other test cards, refunds succeed immediately and don’t change status after that.)\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nAsynchronous success\t4000000000007726\n\tThe charge succeeds. If you initiate a refund, its status begins as pending. Some time later, its status transitions to succeeded and sends a charge.refund.updated webhook event.\nAsynchronous failure\t4000000000005126\n\tThe charge succeeds. If you initiate a refund, its status begins as succeeded. Some time later, its status transitions to failed and sends a charge.refund.updated webhook event.\nAvailable balance\n\nTo send the funds from a test transaction directly to your available balance, use the test cards in this section. Other test cards send funds from a successful payment to your pending balance.\n\nCard numbers\nPaymentMethods\nTokens\nDESCRIPTION\tNUMBER\tDETAILS\nBypass pending balance\t4000000000000077\n\tThe US charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\nBypass pending balance\t4000003720000278\n\tThe international charge succeeds. Funds are added directly to your available balance, bypassing your pending balance.\n3D Secure authentication\n\n3D Secure requires an additional layer of authentication for credit card transactions. The test cards in this section allow you to simulate triggering authentication in different payment flows.\n\nOnly cards in this section effectively test your 3D Secure integration by simulating defined 3DS behavior, such as a challenge flow or an unsupported card. Other Stripe testing cards might still trigger 3DS, but we return attempt_acknowledged to bypass the additional steps since 3DS testing isn’t the objective for those cards.\n\nDashboard not supported\n\n3D Secure redirects won’t occur for payments created directly in the Stripe Dashboard. Instead, use your integration’s own frontend or an API call.\n\nAuthentication and setup\n\nTo simulate payment flows that include authentication, use the test cards in this section. Some of these cards can also be set up for future payments, or have already been.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\n\n\nAuthenticate unless set up\t4000002500003155\n\tThis card requires authentication for off-session payments unless you set it up for future payments. After you set it up, off-session payments no longer require authentication.\nAlways authenticate\t4000002760003184\n\tThis card requires authentication on all transactions, regardless of how the card is set up.\nAlready set up\t4000003800000446\n\tThis card is already set up for off-session use. It requires authentication for one-time and other on-session payments. However, all off-session payments succeed as if the card has been previously set up.\nInsufficient funds\t4000008260003178\n\tThis card requires authentication for one-time payments. All payments are declined with an insufficient_funds failure code even after being successfully authenticated or previously set up.\nSupport and availability\n\nStripe requests authentication when required by regulation or when triggered by your Radar rules or custom code. Even if authentication is requested, it can’t always be performed—for instance, the customer’s card might not be enrolled, or an error might occur. Use the test cards in this section to simulate various combinations of these factors.\n\nNote\n\nAll 3DS references indicate 3D Secure 2.\n\nCard numbers\nPaymentMethods\nTokens\n3D SECURE USAGE\tOUTCOME\tNUMBER\tDETAILS\n\n\n3DS Required\tOK\t4000000000003220\n\t3D Secure authentication must be completed for the payment to be successful. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tDeclined\t4000008400001629\n\t3D Secure authentication is required, but payments are declined with a card_declined failure code after authentication. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Required\tError\t4000008400001280\n\t3D Secure authentication is required, but the 3D Secure lookup request fails with a processing error. Payments are declined with a card_declined failure code. By default, your Radar rules request 3D Secure authentication for this card.\n3DS Supported\tOK\t4000000000003055\n\t3D Secure authentication might still be performed, but isn’t required. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tError\t4000000000003097\n\t3D Secure authentication might still be performed, but isn’t required. However, attempts to perform 3D Secure result in a processing error. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Supported\tUnenrolled\t4242424242424242\n\t3D Secure is supported for this card, but this card isn’t enrolled in 3D Secure. Even if your Radar rules request 3D Secure, the customer won’t be prompted to authenticate. By default, your Radar rules don’t request 3D Secure authentication for this card.\n3DS Not supported\t378282246310005\n\t3D Secure isn’t supported on this card and can’t be invoked. The PaymentIntent or SetupIntent proceeds without performing authentication.\n3D Secure mobile challenge flows\n\nIn a mobile payment, several challenge flows for authentication—where the customer has to interact with prompts in the UI—are available. Use the test cards in this section to trigger a specific challenge flow for test purposes. These cards aren’t useful in browser-based payment forms or in API calls. In those environments, they work but don’t trigger any special behavior. Because they’re not useful in API calls, we don’t provide any PaymentMethod or Token values to test with.\n\nCHALLENGE FLOW\tNUMBER\tDETAILS\n\n\nOut of band\t4000000000003220\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with Out of Band UI.\nOne time passcode\t4000000000003238\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with One Time Passcode UI.\nSingle select\t4000000000003246\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with single-select UI.\nMulti select\t4000000000003253\n\t3D Secure 2 authentication must be completed on all transactions. Triggers the challenge flow with multi-select UI.\nPayments with PINs\n\nUse the test cards in this section to simulate successful in-person payments where a PIN is involved. There are many other options for testing in-person payments, including a simulated reader and physical test cards. See Test Stripe Terminal for more information.\n\nCard numbers\nPaymentMethods\nDESCRIPTION\tNUMBER\tDETAILS\nOffline PIN\t4001007020000002\n\tThis card simulates a payment where the cardholder is prompted for and enters an offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOffline PIN retry\t4000008260000075\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their offline PIN. The resulting charge has cardholder_verification_method set to offline_pin.\nOnline PIN\t4001000360000005\n\tThis card simulates a payment where the cardholder is prompted for and enters an online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nOnline PIN retry\t4000002760000008\n\tSimulates an SCA-triggered retry flow where a cardholder’s initial contactless charge fails and the reader then prompts the user to insert their card and enter their online PIN. The resulting charge has cardholder_verification_method set to online_pin.\nWebhooks\n\nTo test webhooks, you have two options:\n\nPerform actions in test mode that send legitimate events to your endpoint. For instance, to trigger the charge.succeeded event, you can use a test card that produces a successful charge.\nTrigger events using the Stripe CLI or using Stripe for Visual Studio Code.\nRate limits\n\nIf your requests in test mode begin to receive 429 HTTP errors, make them less frequently. These errors come from our rate limiter, which is stricter in test mode than in live mode.\n\nWe don’t recommend load testing your integration using the Stripe API in test mode. Because the load limiter is stricter in test mode, you might see errors that you wouldn’t see in production. See load testing for an alternative approach.\n\nNon-card payments\n\nAny time you use a test non-card payment method, use test API keys in all API calls. This is true whether you’re serving a payment form you can test interactively or writing test code.\n\nDifferent payment methods have different test procedures:\n\nACH Direct Debit\nSEPA debit\nBACS debit\nBECS\nLink\nOthers\n\nLearn how to test scenarios with instant verifications using Financial Connections.\n\nSend transaction emails in test mode\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the payment_method_data.billing_details[email] field in the form of {any-prefix}+test_email@{any_domain} when you collect the payment method details.\n\nCommon mistake\n\nYou need to activate your Stripe account before you can trigger these emails in Test mode.\n\nTest account numbers\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\nACCOUNT NUMBER\tTOKEN\tROUTING NUMBER\tBEHAVIOR\n000123456789\tpm_usBankAccount_success\t110000000\tThe payment succeeds.\n000111111113\tpm_usBankAccount_accountClosed\t110000000\tThe payment fails because the account is closed.\n000111111116\tpm_usBankAccount_noAccount\t110000000\tThe payment fails because no account is found.\n000222222227\tpm_usBankAccount_insufficientFunds\t110000000\tThe payment fails due to insufficient funds.\n000333333335\tpm_usBankAccount_debitNotAuthorized\t110000000\tThe payment fails because debits aren’t authorized.\n000444444440\tpm_usBankAccount_invalidCurrency\t110000000\tThe payment fails due to invalid currency.\n000666666661\tpm_usBankAccount_failMicrodeposits\t110000000\tThe payment fails to send microdeposits.\n000555555559\tpm_usBankAccount_dispute\t110000000\tThe payment triggers a dispute.\n000000000009\tpm_usBankAccount_processing\t110000000\tThe payment stays in processing indefinitely. Useful for testing PaymentIntent cancellation.\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\nTest microdeposit amounts and descriptor codes\n\nTo mimic different scenarios, use these microdeposit amounts or 0.01 descriptor code values.\n\nMICRODEPOSIT VALUES\t0.01 DESCRIPTOR CODE VALUES\tSCENARIO\n32 and 45\tSM11AA\tSimulates verifying the account.\n10 and 11\tSM33CC\tSimulates exceeding the number of allowed verification attempts.\n40 and 41\tSM44DD\tSimulates a microdeposit timeout.\nRedirects\n\nTo test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow (for example, iDEAL), use a supported payment method that requires redirects.\n\nTo create a test PaymentIntent that either succeeds or fails:\n\nNavigate to the payment methods settings in the Dashboard and enable a supported payment method by clicking Turn on in test mode.\nCollect payment details.\nSubmit the payment to Stripe.\nAuthorize or fail the test payment.\n\nMake sure that the page (corresponding to return_url) on your website provides the status of the payment.\n\nSee also\nTesting your Connect integration\nTesting your Billing integration\nTesting your Terminal integration\nLoad testing\nWas this page helpful?\nYes\nNo\nNeed help? Contact Support.\nJoin our early access program.\nCheck out our product changelog.\nQuestions? Contact Sales.\nPowered by Markdoc\nSign up for developer updates:\nSign up\nYou can unsubscribe at any time. Read our privacy policy.\nON THIS PAGE\nHow to use test cards\nCards by brand\nCards by country\nDeclined payments\nFraud prevention\nInvalid data\nDisputes\nRefunds\nAvailable balance\n3D Secure authentication\nPayments with PINs\nWebhooks\nRate limits\nNon-card payments\nRedirects\nSee also\nRELATED GUIDES\nTest mode\nAPI keys\nStripe Shell\nTest mode\nAPI Explorer\n\nWelcome to the Stripe Shell!\n\nStripe Shell is a browser-based shell with the Stripe CLI pre-installed. Log in to your\nStripe account and press Control + Backtick (`) on your keyboard to start managing your Stripe\nresources in test mode.\n\n- View supported Stripe commands: \nstripe help ▶️\n\n- Find webhook events: \nstripe trigger ▶️ [event]\n\n- Listen for webhook events: \nstripe listen ▶\n\n- Call Stripe APIs: stripe [api resource] [operation] (e.g., \nstripe customers list ▶️\n)\n\n$ ",
            "word_count": 3830,
            "filtered_content": "",
            "filtered_word_count": 0
        }
    }
}